/*import sharp from 'sharp'
import { webp2png } from '../lib/webp2mp4.js'
import uploadFile from '../lib/uploadFile.js'
import uploadImage from '../lib/uploadImage.js'

let handler = async (m, { conn, args }) => {
  let stiker = false
  try {
    let q = m.quoted ? m.quoted : m
    let mime = (q.msg || q).mimetype || q.mediaType || ''
    if (/webp|image|video/g.test(mime)) {
      if (/video/.test(mime) && (q.msg || q).seconds > 11) return m.reply('M치ximo *10* segundos')
      let img = await q.download?.()
      if (!img) return m.reply('游뛀 Responda a una *Imagen* o *V칤deo.*')

      try {
        stiker = await createStickerFromBuffer(img)
      } catch (e) {
        console.error(e)
      }

      if (!stiker) {
        let out
        if (/webp/.test(mime)) out = await webp2png(img)
        else if (/image/.test(mime)) out = await uploadImage(img)
        else if (/video/.test(mime)) out = await uploadFile(img)
        if (typeof out !== 'string') out = await uploadImage(img)
        stiker = await createStickerFromURL(out)
      }
    } else if (args[0]) {
      if (isUrl(args[0])) stiker = await createStickerFromURL(args[0])
      else return m.reply('La *URL* es inv치lida.')
    }
  } catch (e) {
    console.error(e)
    if (!stiker) stiker = e
  } finally {
    if (stiker) conn.sendFile(m.chat, stiker, 'sticker.webp', '', m)
    else return m.reply('游뛀 Responda a una *Imagen* o *V칤deo.*')
  }
}

handler.command = ['st']
export default handler

// Funci칩n que crea un sticker manteniendo proporciones desde un buffer
async function createStickerFromBuffer(buffer) {
  return await sharp(buffer)
    .resize(512, 512, {
      fit: 'contain',
      background: { r: 0, g: 0, b: 0, alpha: 0 }
    })
    .webp()
    .toBuffer()
}

// Funci칩n que descarga la imagen desde una URL y la convierte en sticker
async function createStickerFromURL(url) {
  const res = await fetch(url)
  const buffer = await res.arrayBuffer()
  return await createStickerFromBuffer(Buffer.from(buffer))
}

// Validaci칩n simple de URLs de imagen
const isUrl = (text) => {
  return text.match(/^https?:\/\/.*\.(jpg|jpeg|png|gif)$/i)
}*/
