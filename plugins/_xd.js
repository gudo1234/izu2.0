/*import fetch from 'node-fetch'
import { sticker } from '../lib/sticker.js'

function pickRandom(list) {
  return list[Math.floor(Math.random() * list.length)]
}

const handler = async (m, { conn }) => {
  try {
    const stikerxd = [
      'https://telegra.ph/file/e8be85aeb9a625f533a4a.png',
      'https://telegra.ph/file/913f5861cefbdde379921.jpg',
      'https://telegra.ph/file/6b7b0dbf022ee46a44887.jpg'
    ]
    
    const url = pickRandom(stikerxd)
    const imgBuffer = await fetch(url).then(res => res.buffer())
    const webpBuffer = await sticker(imgBuffer, false, global.packname, global.author)

    await conn.sendMessage(
      m.chat,
      { sticker: webpBuffer },
      { quoted: m }
    )
  } catch (e) {
    console.error('Error al enviar sticker xd:', e)
  }
}

handler.customPrefix = /xd/
handler.command = new RegExp

export default handler*/

import { createCanvas } from 'canvas';
import fs from 'fs';
import path from 'path';

let handler = async (m, { text, command, conn }) => {
  if (!text.includes(' ')) {
    throw `*Ejemplo de uso:*\n${command} Alba es novia de Bruno`;
  }

  const [title, ...messageParts] = text.split(' ');
  const message = messageParts.join(' ');

  const width = 800;
  const height = 400;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');

  // Fondo blanco
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, width, height);

  // Fondo degradado de la tarjeta
  const gradient = ctx.createLinearGradient(0, 0, 0, 80);
  gradient.addColorStop(0, '#ff007a');
  gradient.addColorStop(1, '#ff8a00');

  ctx.fillStyle = gradient;
  ctx.fillRect(150, 100, 500, 80);

  // Texto del título
  ctx.fillStyle = '#ffffff';
  ctx.font = 'bold 36px sans-serif';
  ctx.textAlign = 'center';
  ctx.fillText(title, width / 2, 150);

  // Texto del mensaje
  ctx.fillStyle = '#000000';
  ctx.font = '28px sans-serif';
  ctx.fillText(message, width / 2, 250);

  const buffer = canvas.toBuffer('image/png');
  const filename = `./tmp/fakengl-${Date.now()}.png`;
  fs.writeFileSync(filename, buffer);

  await conn.sendMessage(m.chat, {
    image: fs.readFileSync(filename),
    caption: `✧ *Fake NGL Message Successfully Generated*\n\n✦ *Title:* ${title}\n✦ *Message:* ${message}\n\nGenerated by ${command}`
  }, { quoted: m });

  fs.unlinkSync(filename); // Elimina el archivo temporal
};

handler.command = ['fakengl'];

export default handler;
